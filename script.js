const apiKey = "demo";
let stockChart = null;
let currentSymbol = ""; // L∆∞u t·∫°m m√£ ƒëang xem ƒë·ªÉ th√™m y√™u th√≠ch

async function getStockPrice(customSymbol, isRefresh) {
  // N·∫øu l√† refresh th√¨ s·ª≠ d·ª•ng symbol hi·ªán t·∫°i, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ input
  const symbol = isRefresh ? currentSymbol : (customSymbol || document.getElementById("symbol-input").value.trim().toUpperCase() || "MSFT");
  currentSymbol = symbol;
  
  // Hi·ªÉn th·ªã loading
  const loadingIndicator = document.getElementById("loading-indicator");
  const stockInfo = document.getElementById("stock-info");
  const addFavBtn = document.getElementById("add-favorite-btn");
  const priceAlert = document.getElementById("price-alert");
  
  // ·∫®n k·∫øt qu·∫£ c≈© v√† hi·ªán loading
  stockInfo.innerHTML = "";
  loadingIndicator.classList.remove("hidden");
  priceAlert.classList.add("hidden");
  document.getElementById("stockChart").style.display = "none";
  addFavBtn.style.display = "none";

  try {
    // Code g·ªçi API nh∆∞ c≈©
    const priceUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${apiKey}`;
    const historyUrl = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${apiKey}`;
    const overviewUrl = `https://www.alphavantage.co/query?function=OVERVIEW&symbol=${symbol}&apikey=${apiKey}`;

    const [priceRes, historyRes, overviewRes] = await Promise.all([
      fetch(priceUrl),
      fetch(historyUrl),
      fetch(overviewUrl)
    ]);

    const priceData = await priceRes.json();
    const historyData = await historyRes.json();
    const overviewData = await overviewRes.json();

    const quote = priceData["Global Quote"];
    const timeSeries = historyData["Time Series (Daily)"];
    const companyName = overviewData.Name;

    if (!quote || !timeSeries) {
      stockInfo.innerHTML = `<p>Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu, th·ª≠ l·∫°i v·ªõi m√£ kh√°c.</p>`;
      document.getElementById("stockChart").style.display = "none";
      addFavBtn.style.display = "none";
      return;
    }

    stockInfo.innerHTML = `
      <h2>${symbol}</h2>
      <p><strong>T√™n c√¥ng ty:</strong> ${companyName || "Kh√¥ng r√µ"}</p>
      <p><strong>Gi√° hi·ªán t·∫°i:</strong> $${parseFloat(quote["05. price"]).toFixed(2)}</p>
      <p><strong>Thay ƒë·ªïi:</strong> ${quote["09. change"]} USD</p>
      <p><strong>T·ª∑ l·ªá thay ƒë·ªïi:</strong> ${quote["10. change percent"]}</p>
    `;

    // Ki·ªÉm tra c·∫£nh b√°o gi√°
    const currentPrice = parseFloat(quote["05. price"]);
    checkPriceAlerts(symbol, currentPrice);

    // Hi·ªÉn th·ªã n√∫t c√†i ƒë·∫∑t c·∫£nh b√°o
    document.getElementById("toggle-alert-btn").style.display = "inline-block";

    // Hi·ªÉn th·ªã c·∫£nh b√°o tƒÉng/gi·∫£m gi√°
    const priceAlert = document.getElementById("price-alert");
    const changePercent = parseFloat(quote["10. change percent"]);

    if (!isNaN(changePercent)) {
      priceAlert.classList.remove("hidden", "up", "down");
      if (changePercent > 0) {
        priceAlert.classList.add("up");
        priceAlert.textContent = `üîî C·ªï phi·∫øu ${symbol} ƒëang tƒÉng gi√° (+${changePercent}%)`;
      } else if (changePercent < 0) {
        priceAlert.classList.add("down");
        priceAlert.textContent = `üîî C·ªï phi·∫øu ${symbol} ƒëang gi·∫£m gi√° (${changePercent}%)`;
      } else {
        priceAlert.classList.add("up");
        priceAlert.textContent = `üîî C·ªï phi·∫øu ${symbol} kh√¥ng ƒë·ªïi.`;
      }
    } else {
      priceAlert.classList.add("hidden");
    }


    // Hi·ªÉn th·ªã n√∫t "Th√™m v√†o y√™u th√≠ch"
    addFavBtn.style.display = "inline-block";

    const dates = Object.keys(timeSeries).slice(0, 30).reverse();
    const prices = dates.map(date => parseFloat(timeSeries[date]["4. close"]));

    const ctx = document.getElementById("stockChart").getContext("2d");
    if (stockChart && typeof stockChart.destroy === "function") {
      stockChart.destroy();
    }

    stockChart = new Chart(ctx, {
      type: "line",
      data: {
        labels: dates,
        datasets: [{
          label: "Gi√° ƒë√≥ng c·ª≠a (30 ng√†y)",
          data: prices,
          borderColor: "blue",
          fill: false,
          tension: 0.2
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: { title: { display: true, text: "Ng√†y" } },
          y: { title: { display: true, text: "Gi√° ($)" } }
        }
      }
    });

    document.getElementById("stockChart").style.display = "block";
    loadingIndicator.classList.add("hidden");
  } catch (error) {
    // X·ª≠ l√Ω l·ªói
    stockInfo.innerHTML = `<p>ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi API.</p>`;
    console.error("L·ªói k·∫øt n·ªëi:", error);
    
    // C≈©ng c·∫ßn ·∫©n loading khi g·∫∑p l·ªói
    loadingIndicator.classList.add("hidden");
    addFavBtn.style.display = "none";
  }
  setTimeout(() => {
    document.getElementById("loading-indicator").classList.add("hidden");
  }, 5000);
}

// X·ª≠ l√Ω hi·ªÉn th·ªã/·∫©n ph·∫ßn c√†i ƒë·∫∑t c·∫£nh b√°o
function toggleAlertSettings() {
  const alertSettings = document.getElementById("alert-settings");
  alertSettings.classList.toggle("hidden");
  
  // Hi·ªÉn th·ªã gi√° tr·ªã c·∫£nh b√°o ƒë√£ l∆∞u (n·∫øu c√≥)
  const symbol = currentSymbol;
  if (symbol) {
    const alertData = JSON.parse(localStorage.getItem(`alert_${symbol}`) || "{}");
    document.getElementById("alert-upper").value = alertData.upper || "";
    document.getElementById("alert-lower").value = alertData.lower || "";
  }
}

// L∆∞u c√†i ƒë·∫∑t c·∫£nh b√°o
function saveAlertSettings() {
  const symbol = currentSymbol;
  if (!symbol) return;
  
  const upperLimit = document.getElementById("alert-upper").value;
  const lowerLimit = document.getElementById("alert-lower").value;
  
  // L∆∞u v√†o localStorage
  localStorage.setItem(`alert_${symbol}`, JSON.stringify({
    upper: upperLimit || null,
    lower: lowerLimit || null
  }));
  
  // Th√¥ng b√°o
  alert(`ƒê√£ l∆∞u c·∫£nh b√°o cho ${symbol}`);
  
  // ·∫®n ph·∫ßn c√†i ƒë·∫∑t
  document.getElementById("alert-settings").classList.add("hidden");
}

// Ki·ªÉm tra v√† hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu gi√° v∆∞·ª£t ng∆∞·ª°ng
function checkPriceAlerts(symbol, currentPrice) {
  if (!symbol || !currentPrice) return;
  
  const alertData = JSON.parse(localStorage.getItem(`alert_${symbol}`) || "{}");
  const upperLimit = parseFloat(alertData.upper);
  const lowerLimit = parseFloat(alertData.lower);
  
  // Ki·ªÉm tra ng∆∞·ª°ng tr√™n
  if (!isNaN(upperLimit) && currentPrice > upperLimit) {
    showPriceNotification(`üîî ${symbol} ƒë√£ v∆∞·ª£t ng∆∞·ª°ng ${upperLimit}! Gi√° hi·ªán t·∫°i: ${currentPrice}`);
  }
  
  // Ki·ªÉm tra ng∆∞·ª°ng d∆∞·ªõi
  if (!isNaN(lowerLimit) && currentPrice < lowerLimit) {
    showPriceNotification(`üîî ${symbol} ƒë√£ xu·ªëng d∆∞·ªõi ng∆∞·ª°ng ${lowerLimit}! Gi√° hi·ªán t·∫°i: ${currentPrice}`);
  }
}

// Hi·ªÉn th·ªã th√¥ng b√°o gi√°
function showPriceNotification(message) {
  // T·∫°o ph·∫ßn t·ª≠ th√¥ng b√°o
  const notification = document.createElement("div");
  notification.className = "price-notification";
  notification.textContent = message;
  
  // Th√™m v√†o body
  document.body.appendChild(notification);
  
  // X√≥a sau 5 gi√¢y
  setTimeout(() => {
    notification.remove();
  }, 5000);
}

// X·ª≠ l√Ω th√™m v√†o danh s√°ch y√™u th√≠ch khi ng∆∞·ªùi d√πng b·∫•m n√∫t
function addToFavorites() {
  const symbol = currentSymbol;
  if (!symbol) return;

  const favoriteList = document.getElementById("favorite-list");
  
  // T√¨m ph·∫ßn t·ª≠ n·∫øu ƒë√£ t·ªìn t·∫°i
  const existingLi = Array.from(favoriteList.children).find(li => li.dataset.symbol === symbol);
  
  // N·∫øu ƒë√£ t·ªìn t·∫°i th√¨ x√≥a
  if (existingLi) {
    existingLi.remove();
  }

  // Ti·∫øp t·ª•c t·∫°o ph·∫ßn t·ª≠ m·ªõi nh∆∞ code c≈©
  const li = document.createElement("li");
  li.dataset.symbol = symbol;

  const span = document.createElement("span");
  span.textContent = symbol;
  span.className = "favorite-symbol";
  span.onclick = () => getStockPriceFromFavorite(symbol);

  const removeBtn = document.createElement("button");
  removeBtn.textContent = "X";
  removeBtn.className = "remove-btn";
  removeBtn.onclick = () => {
    li.remove();
    // X√≥a ghi ch√∫ kh·ªèi localStorage khi x√≥a m√£
    localStorage.removeItem(`note_${symbol}`);
    saveFavorites(); // S·∫Ω th√™m h√†m n√†y ·ªü b∆∞·ªõc ti·∫øp theo
  };

  const noteInput = document.createElement("input");
  noteInput.type = "text";
  noteInput.placeholder = "Ghi ch√∫...";
  noteInput.className = "stock-note";
  noteInput.addEventListener("input", () => {
    localStorage.setItem(`note_${symbol}`, noteInput.value);
  });
  
  // L·∫•y ghi ch√∫ t·ª´ localStorage n·∫øu c√≥
  noteInput.value = localStorage.getItem(`note_${symbol}`) || "";

  li.appendChild(span);
  li.appendChild(removeBtn);
  li.appendChild(noteInput);
  favoriteList.appendChild(li);
  
  // L∆∞u danh s√°ch y√™u th√≠ch sau khi th√™m
  saveFavorites();
}

// L∆∞u danh s√°ch y√™u th√≠ch v√†o localStorage
function saveFavorites() {
  const favoriteList = document.getElementById("favorite-list");
  const favorites = Array.from(favoriteList.children).map(li => {
    return {
      symbol: li.dataset.symbol,
      note: li.querySelector('.stock-note').value
    };
  });
  
  localStorage.setItem('favorites', JSON.stringify(favorites));
}

// T·∫£i danh s√°ch y√™u th√≠ch t·ª´ localStorage
function loadFavorites() {
  const favoritesJson = localStorage.getItem('favorites');
  if (!favoritesJson) return;
  
  try {
    const favorites = JSON.parse(favoritesJson);
    favorites.forEach(fav => {
      // L∆∞u symbol hi·ªán t·∫°i t·∫°m th·ªùi
      currentSymbol = fav.symbol;
      
      // Th√™m v√†o danh s√°ch (s·ª≠ d·ª•ng h√†m ƒë√£ c√≥)
      addToFavorites();
      
      // C·∫≠p nh·∫≠t ghi ch√∫ (n·∫øu c√≥)
      if (fav.note) {
        localStorage.setItem(`note_${fav.symbol}`, fav.note);
      }
    });
  } catch (e) {
    console.error("L·ªói khi t·∫£i danh s√°ch y√™u th√≠ch:", e);
  }
}

// Cho ph√©p tra c·ª©u l·∫°i khi click v√†o m√£ y√™u th√≠ch
function getStockPriceFromFavorite(symbol) {
  document.getElementById("symbol-input").value = symbol;
  getStockPrice();
}

window.onload = function () {
  document.getElementById("toggle-alert-btn").addEventListener("click", toggleAlertSettings);
  document.getElementById("save-alert-btn").addEventListener("click", saveAlertSettings);
  // T·∫£i danh s√°ch y√™u th√≠ch tr∆∞·ªõc
  loadFavorites();
  
  // T·∫£i th√¥ng tin c·ªï phi·∫øu m·∫∑c ƒë·ªãnh
  getStockPrice('MSFT');

  const themeToggleBtn = document.getElementById("theme-toggle-btn");
  
  // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn ch·∫ø ƒë·ªô t·ªëi tr∆∞·ªõc ƒë√≥
  if (localStorage.getItem("theme") === "dark") {
    document.body.classList.add("dark-theme");
    themeToggleBtn.textContent = "‚òÄÔ∏è Ch·∫ø ƒë·ªô s√°ng";
  }
  
  themeToggleBtn.addEventListener("click", function() {
    // Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô
    document.body.classList.toggle("dark-theme");
    
    // L∆∞u t√πy ch·ªçn
    if (document.body.classList.contains("dark-theme")) {
      localStorage.setItem("theme", "dark");
      themeToggleBtn.textContent = "‚òÄÔ∏è Ch·∫ø ƒë·ªô s√°ng";
    } else {
      localStorage.setItem("theme", "light");
      themeToggleBtn.textContent = "üåô Ch·∫ø ƒë·ªô t·ªëi";
    }
  });
};