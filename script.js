const apiKey = "demo";
let stockChart = null;
let currentSymbol = ""; // L∆∞u t·∫°m m√£ ƒëang xem ƒë·ªÉ th√™m y√™u th√≠ch

async function getStockPrice(customSymbol, isRefresh) {
  // N·∫øu l√† refresh th√¨ s·ª≠ d·ª•ng symbol hi·ªán t·∫°i, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ input
  const symbol = isRefresh ? currentSymbol : (customSymbol || document.getElementById("symbol-input").value.trim().toUpperCase() || "MSFT");
  currentSymbol = symbol;
  
  // Hi·ªÉn th·ªã loading
  const loadingIndicator = document.getElementById("loading-indicator");
  const stockInfo = document.getElementById("stock-info");
  const addFavBtn = document.getElementById("add-favorite-btn");
  const priceAlert = document.getElementById("price-alert");
  
  // ·∫®n k·∫øt qu·∫£ c≈© v√† hi·ªán loading
  stockInfo.innerHTML = "";
  loadingIndicator.classList.remove("hidden");
  priceAlert.classList.add("hidden");
  document.getElementById("stockChart").style.display = "none";
  addFavBtn.style.display = "none";

  try {
    // Code g·ªçi API nh∆∞ c≈©
    const priceUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${apiKey}`;
    const historyUrl = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${apiKey}`;
    const overviewUrl = `https://www.alphavantage.co/query?function=OVERVIEW&symbol=${symbol}&apikey=${apiKey}`;

    const [priceRes, historyRes, overviewRes] = await Promise.all([
      fetch(priceUrl),
      fetch(historyUrl),
      fetch(overviewUrl)
    ]);

    const priceData = await priceRes.json();
    const historyData = await historyRes.json();
    const overviewData = await overviewRes.json();

    const quote = priceData["Global Quote"];
    const timeSeries = historyData["Time Series (Daily)"];
    const companyName = overviewData.Name;

    if (!quote || !timeSeries) {
      stockInfo.innerHTML = `<p>Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu, th·ª≠ l·∫°i v·ªõi m√£ kh√°c.</p>`;
      document.getElementById("stockChart").style.display = "none";
      addFavBtn.style.display = "none";
      return;
    }

    stockInfo.innerHTML = `
      <h2>${symbol}</h2>
      <p><strong>T√™n c√¥ng ty:</strong> ${companyName || "Kh√¥ng r√µ"}</p>
      <p><strong>Gi√° hi·ªán t·∫°i:</strong> $${parseFloat(quote["05. price"]).toFixed(2)}</p>
      <p><strong>Thay ƒë·ªïi:</strong> ${quote["09. change"]} USD</p>
      <p><strong>T·ª∑ l·ªá thay ƒë·ªïi:</strong> ${quote["10. change percent"]}</p>
    `;

    // Ki·ªÉm tra c·∫£nh b√°o gi√°
    const currentPrice = parseFloat(quote["05. price"]);
    checkPriceAlerts(symbol, currentPrice);

    // Hi·ªÉn th·ªã n√∫t c√†i ƒë·∫∑t c·∫£nh b√°o
    document.getElementById("toggle-alert-btn").style.display = "inline-block";

    // Hi·ªÉn th·ªã c·∫£nh b√°o tƒÉng/gi·∫£m gi√°
    const priceAlert = document.getElementById("price-alert");
    const changePercent = parseFloat(quote["10. change percent"]);

    if (!isNaN(changePercent)) {
      priceAlert.classList.remove("hidden", "up", "down");
      if (changePercent > 0) {
        priceAlert.classList.add("up");
        priceAlert.textContent = `üîî C·ªï phi·∫øu ${symbol} ƒëang tƒÉng gi√° (+${changePercent}%)`;
      } else if (changePercent < 0) {
        priceAlert.classList.add("down");
        priceAlert.textContent = `üîî C·ªï phi·∫øu ${symbol} ƒëang gi·∫£m gi√° (${changePercent}%)`;
      } else {
        priceAlert.classList.add("up");
        priceAlert.textContent = `üîî C·ªï phi·∫øu ${symbol} kh√¥ng ƒë·ªïi.`;
      }
    } else {
      priceAlert.classList.add("hidden");
    }


    // Hi·ªÉn th·ªã n√∫t "Th√™m v√†o y√™u th√≠ch"
    addFavBtn.style.display = "inline-block";

    const dates = Object.keys(timeSeries).slice(0, 30).reverse();
    const prices = dates.map(date => parseFloat(timeSeries[date]["4. close"]));

    const ctx = document.getElementById("stockChart").getContext("2d");
    if (stockChart && typeof stockChart.destroy === "function") {
      stockChart.destroy();
    }

    stockChart = new Chart(ctx, {
      type: "line",
      data: {
        labels: dates,
        datasets: [{
          label: "Gi√° ƒë√≥ng c·ª≠a (30 ng√†y)",
          data: prices,
          borderColor: "blue",
          fill: false,
          tension: 0.2
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: { title: { display: true, text: "Ng√†y" } },
          y: { title: { display: true, text: "Gi√° ($)" } }
        }
      }
    });

    // C·∫≠p nh·∫≠t th√¥ng tin danh m·ª•c ƒë·∫ßu t∆∞ n·∫øu c√≥
    const favoriteList = document.getElementById("favorite-list");
    const portfolioItem = Array.from(favoriteList.children).find(li => li.dataset.symbol === symbol);
    if (portfolioItem) {
      const sharesInput = portfolioItem.querySelector(".shares-input");
      const buyPriceInput = portfolioItem.querySelector(".buy-price-input");
      
      if (sharesInput && buyPriceInput) {
        const shares = parseFloat(sharesInput.value);
        const buyPrice = parseFloat(buyPriceInput.value);
        
        if (shares && buyPrice) {
          updatePortfolioDisplay(portfolioItem, parseFloat(quote["05. price"]), shares, buyPrice);
        }
      }
    }

    document.getElementById("stockChart").style.display = "block";
    loadingIndicator.classList.add("hidden");
  } catch (error) {
    // X·ª≠ l√Ω l·ªói
    stockInfo.innerHTML = `<p>ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi API.</p>`;
    console.error("L·ªói k·∫øt n·ªëi:", error);
    
    // C≈©ng c·∫ßn ·∫©n loading khi g·∫∑p l·ªói
    loadingIndicator.classList.add("hidden");
    addFavBtn.style.display = "none";
  }
  setTimeout(() => {
    document.getElementById("loading-indicator").classList.add("hidden");
  }, 5000);
}

// X·ª≠ l√Ω hi·ªÉn th·ªã/·∫©n ph·∫ßn c√†i ƒë·∫∑t c·∫£nh b√°o
function toggleAlertSettings() {
  const alertSettings = document.getElementById("alert-settings");
  alertSettings.classList.toggle("hidden");
  
  // Hi·ªÉn th·ªã gi√° tr·ªã c·∫£nh b√°o ƒë√£ l∆∞u (n·∫øu c√≥)
  const symbol = currentSymbol;
  if (symbol) {
    const alertData = JSON.parse(localStorage.getItem(`alert_${symbol}`) || "{}");
    document.getElementById("alert-upper").value = alertData.upper || "";
    document.getElementById("alert-lower").value = alertData.lower || "";
  }
}

// L∆∞u c√†i ƒë·∫∑t c·∫£nh b√°o
function saveAlertSettings() {
  const symbol = currentSymbol;
  if (!symbol) return;
  
  const upperLimit = document.getElementById("alert-upper").value;
  const lowerLimit = document.getElementById("alert-lower").value;
  
  // L∆∞u v√†o localStorage
  localStorage.setItem(`alert_${symbol}`, JSON.stringify({
    upper: upperLimit || null,
    lower: lowerLimit || null
  }));
  
  // Th√¥ng b√°o
  alert(`ƒê√£ l∆∞u c·∫£nh b√°o cho ${symbol}`);
  
  // ·∫®n ph·∫ßn c√†i ƒë·∫∑t
  document.getElementById("alert-settings").classList.add("hidden");
}

// Ki·ªÉm tra v√† hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu gi√° v∆∞·ª£t ng∆∞·ª°ng
function checkPriceAlerts(symbol, currentPrice) {
  if (!symbol || !currentPrice) return;
  
  const alertData = JSON.parse(localStorage.getItem(`alert_${symbol}`) || "{}");
  const upperLimit = parseFloat(alertData.upper);
  const lowerLimit = parseFloat(alertData.lower);
  
  // Ki·ªÉm tra ng∆∞·ª°ng tr√™n
  if (!isNaN(upperLimit) && currentPrice > upperLimit) {
    showPriceNotification(`üîî ${symbol} ƒë√£ v∆∞·ª£t ng∆∞·ª°ng ${upperLimit}! Gi√° hi·ªán t·∫°i: ${currentPrice}`);
  }
  
  // Ki·ªÉm tra ng∆∞·ª°ng d∆∞·ªõi
  if (!isNaN(lowerLimit) && currentPrice < lowerLimit) {
    showPriceNotification(`üîî ${symbol} ƒë√£ xu·ªëng d∆∞·ªõi ng∆∞·ª°ng ${lowerLimit}! Gi√° hi·ªán t·∫°i: ${currentPrice}`);
  }
}

// Hi·ªÉn th·ªã th√¥ng b√°o gi√°
function showPriceNotification(message) {
  // T·∫°o ph·∫ßn t·ª≠ th√¥ng b√°o
  const notification = document.createElement("div");
  notification.className = "price-notification";
  notification.textContent = message;
  
  // Th√™m v√†o body
  document.body.appendChild(notification);
  
  // X√≥a sau 5 gi√¢y
  setTimeout(() => {
    notification.remove();
  }, 5000);
}

// Thay ƒë·ªïi h√†m addToFavorites() ƒë·ªÉ th√™m th√¥ng tin ƒë·∫ßu t∆∞
function addToFavorites() {
  const symbol = currentSymbol;
  if (!symbol) return;

  const favoriteList = document.getElementById("favorite-list");
  
  // T√¨m ph·∫ßn t·ª≠ n·∫øu ƒë√£ t·ªìn t·∫°i
  const existingLi = Array.from(favoriteList.children).find(li => li.dataset.symbol === symbol);
  
  // N·∫øu ƒë√£ t·ªìn t·∫°i th√¨ x√≥a
  if (existingLi) {
    existingLi.remove();
  }

  // L·∫•y th√¥ng tin c·ªï phi·∫øu ƒëang xem
  const stockInfo = document.getElementById("stock-info");
  const currentPrice = stockInfo.querySelector("p:nth-child(3)")?.textContent || "";
  const priceMatch = currentPrice.match(/\$([0-9.]+)/);
  const price = priceMatch ? parseFloat(priceMatch[1]) : 0;

  // T·∫°o ph·∫ßn t·ª≠ m·ªõi
  const li = document.createElement("li");
  li.dataset.symbol = symbol;
  li.innerHTML = `
    <div class="favorite-item">
      <div class="favorite-header">
        <span class="favorite-symbol" onclick="getStockPriceFromFavorite('${symbol}')">${symbol}</span>
        <button class="remove-btn" onclick="removeFromFavorites(this, '${symbol}')">X</button>
      </div>
      <div class="portfolio-inputs">
        <input type="number" class="shares-input" placeholder="S·ªë l∆∞·ª£ng" min="0" step="1" 
              onchange="updatePortfolioValue('${symbol}', this)">
        <input type="number" class="buy-price-input" placeholder="Gi√° mua" min="0" step="0.01"
              onchange="updatePortfolioValue('${symbol}', this)">
      </div>
      <div class="portfolio-value">
        <div class="value-display">
          <span>Gi√° tr·ªã: </span><span class="current-value">$0.00</span>
        </div>
        <div class="pl-display">
          <span>P/L: </span><span class="profit-loss">$0.00 (0%)</span>
        </div>
      </div>
      <input type="text" class="stock-note" placeholder="Ghi ch√∫..." 
            oninput="localStorage.setItem('note_${symbol}', this.value);">
    </div>
  `;
  
  favoriteList.appendChild(li);
  
  // Kh√¥i ph·ª•c d·ªØ li·ªáu ƒë√£ l∆∞u
  const portfolioData = JSON.parse(localStorage.getItem(`portfolio_${symbol}`) || "{}");
  if (portfolioData.shares) {
    li.querySelector(".shares-input").value = portfolioData.shares;
  }
  if (portfolioData.buyPrice) {
    li.querySelector(".buy-price-input").value = portfolioData.buyPrice;
  }
  
  // Kh√¥i ph·ª•c ghi ch√∫
  const note = localStorage.getItem(`note_${symbol}`);
  if (note) {
    li.querySelector(".stock-note").value = note;
  }
  
  // C·∫≠p nh·∫≠t gi√° tr·ªã n·∫øu c√≥ d·ªØ li·ªáu
  if (price && portfolioData.shares && portfolioData.buyPrice) {
    updatePortfolioDisplay(li, price, portfolioData.shares, portfolioData.buyPrice);
  }
  
  // L∆∞u danh s√°ch y√™u th√≠ch
  saveFavorites();
}

// L∆∞u danh s√°ch y√™u th√≠ch v√†o localStorage
function saveFavorites() {
  const favoriteList = document.getElementById("favorite-list");
  const favorites = Array.from(favoriteList.children).map(li => {
    return {
      symbol: li.dataset.symbol,
      note: li.querySelector('.stock-note').value
    };
  });
  
  localStorage.setItem('favorites', JSON.stringify(favorites));
}

// T·∫£i danh s√°ch y√™u th√≠ch t·ª´ localStorage
function loadFavorites() {
  const favoritesJson = localStorage.getItem('favorites');
  if (!favoritesJson) return;
  
  try {
    const favorites = JSON.parse(favoritesJson);
    favorites.forEach(fav => {
      // L∆∞u symbol hi·ªán t·∫°i t·∫°m th·ªùi
      currentSymbol = fav.symbol;
      
      // Th√™m v√†o danh s√°ch (s·ª≠ d·ª•ng h√†m ƒë√£ c√≥)
      addToFavorites();
    });
  } catch (e) {
    console.error("L·ªói khi t·∫£i danh s√°ch y√™u th√≠ch:", e);
  }
}

// Cho ph√©p tra c·ª©u l·∫°i khi click v√†o m√£ y√™u th√≠ch
function getStockPriceFromFavorite(symbol) {
  document.getElementById("symbol-input").value = symbol;
  getStockPrice();
}

window.onload = function() {
  // ƒêƒÉng k√Ω s·ª± ki·ªán cho c√°c n√∫t
  document.getElementById("toggle-alert-btn").addEventListener("click", toggleAlertSettings);
  document.getElementById("save-alert-btn").addEventListener("click", saveAlertSettings);
  document.getElementById("toggle-ai-assistant-btn").classList.add("hidden");
  
  // Kh·ªüi t·∫°o tr·ª£ l√Ω AI
  initializeAIAssistant();
  
  // T·∫£i danh s√°ch y√™u th√≠ch
  loadFavorites();
  
  // T·∫£i th√¥ng tin c·ªï phi·∫øu m·∫∑c ƒë·ªãnh
  getStockPrice('MSFT');

  // Thi·∫øt l·∫≠p ch·ª©c nƒÉng chuy·ªÉn ƒë·ªïi ch·ªß ƒë·ªÅ
  const themeToggleBtn = document.getElementById("theme-toggle-btn");
  
  // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn ch·∫ø ƒë·ªô t·ªëi tr∆∞·ªõc ƒë√≥
  if (localStorage.getItem("theme") === "dark") {
    document.body.classList.add("dark-theme");
    themeToggleBtn.textContent = "‚òÄÔ∏è Ch·∫ø ƒë·ªô s√°ng";
  }
  
  themeToggleBtn.addEventListener("click", function() {
    // Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô
    document.body.classList.toggle("dark-theme");
    
    // L∆∞u t√πy ch·ªçn
    if (document.body.classList.contains("dark-theme")) {
      localStorage.setItem("theme", "dark");
      themeToggleBtn.textContent = "‚òÄÔ∏è Ch·∫ø ƒë·ªô s√°ng";
    } else {
      localStorage.setItem("theme", "light");
      themeToggleBtn.textContent = "üåô Ch·∫ø ƒë·ªô t·ªëi";
    }
  });
};

// L∆∞u th√¥ng tin ƒë·∫ßu t∆∞ (s·ªë l∆∞·ª£ng v√† gi√° mua)
function updatePortfolioValue(symbol, inputElement) {
  const li = inputElement.closest("li");
  const sharesInput = li.querySelector(".shares-input");
  const buyPriceInput = li.querySelector(".buy-price-input");
  
  const shares = parseFloat(sharesInput.value);
  const buyPrice = parseFloat(buyPriceInput.value);
  
  // L∆∞u v√†o localStorage
  localStorage.setItem(`portfolio_${symbol}`, JSON.stringify({
    shares: shares || 0,
    buyPrice: buyPrice || 0
  }));
  
  // L·∫•y gi√° hi·ªán t·∫°i t·ª´ API ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã
  fetchCurrentPrice(symbol, price => {
    if (price) {
      updatePortfolioDisplay(li, price, shares, buyPrice);
    }
  });
}

// H√†m l·∫•y gi√° hi·ªán t·∫°i
async function fetchCurrentPrice(symbol, callback) {
  try {
    const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${apiKey}`;
    const response = await fetch(url);
    const data = await response.json();
    
    const quote = data["Global Quote"];
    if (quote && quote["05. price"]) {
      const price = parseFloat(quote["05. price"]);
      callback(price);
    } else {
      callback(0);
    }
  } catch (error) {
    console.error("L·ªói khi l·∫•y gi√° hi·ªán t·∫°i:", error);
    callback(0);
  }
}

// C·∫≠p nh·∫≠t hi·ªÉn th·ªã gi√° tr·ªã danh m·ª•c
function updatePortfolioDisplay(li, currentPrice, shares, buyPrice) {
  if (!shares || !buyPrice || !currentPrice) return;
  
  const currentValue = shares * currentPrice;
  const initialValue = shares * buyPrice;
  const profitLoss = currentValue - initialValue;
  const profitLossPercent = (profitLoss / initialValue) * 100;
  
  const currentValueEl = li.querySelector(".current-value");
  const profitLossEl = li.querySelector(".profit-loss");
  
  currentValueEl.textContent = `$${currentValue.toFixed(2)}`;
  
  profitLossEl.textContent = `$${profitLoss.toFixed(2)} (${profitLossPercent.toFixed(2)}%)`;
  profitLossEl.className = "profit-loss";
  
  if (profitLoss > 0) {
    profitLossEl.classList.add("profit");
  } else if (profitLoss < 0) {
    profitLossEl.classList.add("loss");
  }
}

function removeFromFavorites(element, symbol) {
  // NgƒÉn s·ª± ki·ªán lan ra
  event.stopPropagation();
  
  const confirmDelete = confirm(`B·∫°n c√≥ mu·ªën x√≥a c·ªï phi·∫øu ${symbol} kh·ªèi danh s√°ch y√™u th√≠ch kh√¥ng?`);
  
  if (confirmDelete) {
    const keepData = confirm(`B·∫°n c√≥ mu·ªën gi·ªØ l·∫°i d·ªØ li·ªáu (s·ªë l∆∞·ª£ng, gi√° mua, ghi ch√∫) c·ªßa c·ªï phi·∫øu ${symbol} kh√¥ng?`);
    
    // X√≥a ph·∫ßn t·ª≠ HTML
    element.parentNode.parentNode.parentNode.remove();
    
    if (!keepData) {
      // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan
      localStorage.removeItem(`portfolio_${symbol}`);
      localStorage.removeItem(`note_${symbol}`);
      localStorage.removeItem(`alert_${symbol}`);
    }
    
    // L∆∞u l·∫°i danh s√°ch y√™u th√≠ch
    saveFavorites();
  }
}

// Th√™m JavaScript ƒë·ªÉ x·ª≠ l√Ω tr·ª£ l√Ω AI
function initializeAIAssistant() {
  const toggleAIBtn = document.getElementById("toggle-ai-assistant-btn");
  const aiSection = document.getElementById("ai-assistant-section");
  const askButton = document.getElementById("ai-ask-btn");
  const questionInput = document.getElementById("ai-question-input");
  const chatMessages = document.getElementById("ai-chat-messages");

  // Hi·ªÉn th·ªã n√∫t k√≠ch ho·∫°t tr·ª£ l√Ω AI khi c√≥ d·ªØ li·ªáu c·ªï phi·∫øu
  function showAIButton() {
    toggleAIBtn.classList.remove("hidden");
  }

  // ·∫®n/hi·ªán khu v·ª±c tr·ª£ l√Ω AI
  toggleAIBtn.addEventListener("click", function() {
    aiSection.classList.toggle("hidden");
  });

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªèi
  askButton.addEventListener("click", handleUserQuestion);
  questionInput.addEventListener("keypress", function(e) {
    if (e.key === "Enter") {
      handleUserQuestion();
    }
  });

function handleUserQuestion() {
  const question = questionInput.value.trim();
  if (!question) return;

  // Hi·ªÉn th·ªã c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
  const userMessageDiv = document.createElement("div");
  userMessageDiv.className = "ai-message user";
  userMessageDiv.textContent = question;
  chatMessages.appendChild(userMessageDiv);

  // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang nh·∫≠p
  const typingDiv = document.createElement("div");
  typingDiv.className = "ai-message";
  typingDiv.innerHTML = '<div class="typing-indicator"><span></span><span></span><span></span></div>';
  chatMessages.appendChild(typingDiv);
  
  // Cu·ªôn xu·ªëng cu·ªëi cu·ªôc tr√≤ chuy·ªán
  chatMessages.scrollTop = chatMessages.scrollHeight;
  
  // X√≥a input
  questionInput.value = "";

  // L·∫•y d·ªØ li·ªáu c·ªï phi·∫øu hi·ªán t·∫°i
  const stockInfo = getStockData();
  
  // Sau m·ªôt kho·∫£ng th·ªùi gian, hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa AI
  setTimeout(() => {
    chatMessages.removeChild(typingDiv);
    const aiMessageDiv = document.createElement("div");
    aiMessageDiv.className = "ai-message";
    aiMessageDiv.innerHTML = generateAIResponse(question, stockInfo);
    chatMessages.appendChild(aiMessageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }, 1500);
}

// L·∫•y d·ªØ li·ªáu c·ªï phi·∫øu hi·ªán t·∫°i
function getStockData() {
  const stockInfoElement = document.getElementById("stock-info");
  const stockInfo = {};

  try {
    // L·∫•y symbol
    const symbolText = stockInfoElement.querySelector("h2")?.textContent || "";
    stockInfo.symbol = symbolText;

    // L·∫•y t√™n c√¥ng ty
    const companyNameElement = stockInfoElement.querySelector("p:nth-child(2)")?.textContent || "";
    stockInfo.companyName = companyNameElement.replace("T√™n c√¥ng ty:", "").trim();

    // L·∫•y gi√° hi·ªán t·∫°i
    const priceElement = stockInfoElement.querySelector("p:nth-child(3)")?.textContent || "";
    const priceMatch = priceElement.match(/\$([0-9.]+)/);
    stockInfo.price = priceMatch ? parseFloat(priceMatch[1]) : 0;

    // L·∫•y thay ƒë·ªïi
    const changeElement = stockInfoElement.querySelector("p:nth-child(4)")?.textContent || "";
    const changeMatch = changeElement.match(/([+-]?[0-9.]+)/);
    stockInfo.change = changeMatch ? parseFloat(changeMatch[0]) : 0;

    // L·∫•y ph·∫ßn trƒÉm thay ƒë·ªïi
    const percentageElement = stockInfoElement.querySelector("p:nth-child(5)")?.textContent || "";
    const percentageMatch = percentageElement.match(/([+-]?[0-9.]+)/);
    stockInfo.changePercent = percentageMatch ? parseFloat(percentageMatch[0]) : 0;

    // L·∫•y d·ªØ li·ªáu t·ª´ chart n·∫øu c√≥
    if (window.stockChart && window.stockChart.data) {
      stockInfo.chartData = {
        dates: [...window.stockChart.data.labels],
        prices: [...window.stockChart.data.datasets[0].data]
      };
    }
  } catch (error) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu c·ªï phi·∫øu:", error);
  }

  return stockInfo;
}

// T·∫°o ph·∫£n h·ªìi t·ª´ AI d·ª±a tr√™n c√¢u h·ªèi v√† d·ªØ li·ªáu c·ªï phi·∫øu
function generateAIResponse(question, stockInfo) {
  question = question.toLowerCase();
  
  // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu c·ªï phi·∫øu
  if (!stockInfo.symbol) {
    return "Vui l√≤ng t√¨m ki·∫øm m·ªôt c·ªï phi·∫øu tr∆∞·ªõc khi h·ªèi v·ªÅ n√≥.";
  }

  // Ph√¢n t√≠ch xu h∆∞·ªõng ƒë∆°n gi·∫£n t·ª´ d·ªØ li·ªáu bi·ªÉu ƒë·ªì
  let trend = "kh√¥ng x√°c ƒë·ªãnh";
  let recommendation = "kh√¥ng c√≥ khuy·∫øn ngh·ªã c·ª• th·ªÉ";
  let technicalAnalysis = "";

  if (stockInfo.chartData && stockInfo.chartData.prices.length > 5) {
    const prices = stockInfo.chartData.prices;
    const recentPrices = prices.slice(-5);
    
    // Ph√¢n t√≠ch xu h∆∞·ªõng ƒë∆°n gi·∫£n
    let upDays = 0;
    for (let i = 1; i < recentPrices.length; i++) {
      if (recentPrices[i] > recentPrices[i-1]) upDays++;
    }
    
    if (upDays >= 3) {
      trend = "tƒÉng";
      recommendation = "c√≥ th·ªÉ xem x√©t mua v√†o n·∫øu ph√π h·ª£p v·ªõi chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ c·ªßa b·∫°n";
    } else if (upDays <= 1) {
      trend = "gi·∫£m";
      recommendation = "n√™n th·∫≠n tr·ªçng v√† theo d√µi th√™m";
    } else {
      trend = "ƒëi ngang";
      recommendation = "n√™n ch·ªù t√≠n hi·ªáu r√µ r√†ng h∆°n";
    }
    
    // Ph√¢n t√≠ch k·ªπ thu·∫≠t ƒë∆°n gi·∫£n
    const lastPrice = prices[prices.length - 1];
    const ma5 = calculateMA(prices, 5);
    const ma10 = calculateMA(prices, 10);
    
    technicalAnalysis = `<br>- Gi√° hi·ªán t·∫°i: $${lastPrice.toFixed(2)}<br>- MA5: $${ma5.toFixed(2)}<br>- MA10: $${ma10.toFixed(2)}`;
    
    if (lastPrice > ma5 && ma5 > ma10) {
      technicalAnalysis += "<br>- Ch·ªâ b√°o: Xu h∆∞·ªõng tƒÉng trong ng·∫Øn h·∫°n, gi√° tr√™n ƒë∆∞·ªùng trung b√¨nh ƒë·ªông";
    } else if (lastPrice < ma5 && ma5 < ma10) {
      technicalAnalysis += "<br>- Ch·ªâ b√°o: Xu h∆∞·ªõng gi·∫£m trong ng·∫Øn h·∫°n, gi√° d∆∞·ªõi ƒë∆∞·ªùng trung b√¨nh ƒë·ªông";
    } else {
      technicalAnalysis += "<br>- Ch·ªâ b√°o: Xu h∆∞·ªõng ch∆∞a r√µ r√†ng";
    }
  }

  // C√°c c√¢u tr·∫£ l·ªùi d·ª±a tr√™n lo·∫°i c√¢u h·ªèi
  if (question.includes("xu h∆∞·ªõng") || question.includes("trend")) {
    return `D·ª±a tr√™n d·ªØ li·ªáu g·∫ßn ƒë√¢y, c·ªï phi·∫øu ${stockInfo.symbol} (${stockInfo.companyName}) c√≥ xu h∆∞·ªõng <strong>${trend}</strong>. Gi√° hi·ªán t·∫°i l√† $${stockInfo.price}, v·ªõi m·ª©c thay ƒë·ªïi ${stockInfo.change} (${stockInfo.changePercent}%).${technicalAnalysis}`;
  }
  else if (question.includes("n√™n ƒë·∫ßu t∆∞") || question.includes("n√™n mua") || question.includes("c√≥ n√™n mua")) {
    return `D·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t ƒë∆°n gi·∫£n, <strong>${recommendation}</strong> ƒë·ªëi v·ªõi c·ªï phi·∫øu ${stockInfo.symbol}. L∆∞u √Ω ƒë√¢y ch·ªâ l√† ph√¢n t√≠ch s∆° b·ªô, b·∫°n n√™n tham kh·∫£o th√™m c√°c ngu·ªìn th√¥ng tin kh√°c v√† ph√¢n t√≠ch c∆° b·∫£n v·ªÅ c√¥ng ty tr∆∞·ªõc khi ƒë∆∞a ra quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞.${technicalAnalysis}`;
  }
  else if (question.includes("ph√¢n t√≠ch k·ªπ thu·∫≠t") || question.includes("technical")) {
    return `Ph√¢n t√≠ch k·ªπ thu·∫≠t c∆° b·∫£n cho ${stockInfo.symbol}:${technicalAnalysis || "<br>Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch k·ªπ thu·∫≠t."}`;
  }
  else if (question.includes("d·ª± ƒëo√°n") || question.includes("ng·∫Øn h·∫°n")) {
    let prediction = "";
    
    if (trend === "tƒÉng") {
      prediction = "t√≠ch c·ª±c";
    } else if (trend === "gi·∫£m") {
      prediction = "ti√™u c·ª±c";
    } else {
      prediction = "ch∆∞a c√≥ t√≠n hi·ªáu r√µ r√†ng";
    }
    
    return `D·ª± ƒëo√°n ng·∫Øn h·∫°n cho ${stockInfo.symbol} l√† <strong>${prediction}</strong>. L∆∞u √Ω r·∫±ng d·ª± ƒëo√°n n√†y ch·ªâ d·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t ƒë∆°n gi·∫£n v√† th·ªã tr∆∞·ªùng ch·ª©ng kho√°n lu√¥n ti·ªÅm ·∫©n r·ªßi ro.${technicalAnalysis}`;
  }
  else {
    return `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch c·ªï phi·∫øu ${stockInfo.symbol} (${stockInfo.companyName}). Gi√° hi·ªán t·∫°i l√† $${stockInfo.price}. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ xu h∆∞·ªõng, khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞, ph√¢n t√≠ch k·ªπ thu·∫≠t ho·∫∑c d·ª± ƒëo√°n ng·∫Øn h·∫°n.`;
  }
}

// T√≠nh to√°n ƒë∆∞·ªùng trung b√¨nh ƒë·ªông
function calculateMA(prices, period) {
  if (prices.length < period) return 0;
  
  const recentPrices = prices.slice(-period);
  const sum = recentPrices.reduce((total, price) => total + price, 0);
  return sum / period;
}

// S·ª≠a ƒë·ªïi h√†m getStockPrice ƒë·ªÉ hi·ªÉn th·ªã n√∫t AI khi c√≥ d·ªØ li·ªáu
const originalGetStockPrice = window.getStockPrice;
window.getStockPrice = function(...args) {
  const result = originalGetStockPrice.apply(this, args);
  
  // Sau khi l·∫•y d·ªØ li·ªáu xong, hi·ªÉn th·ªã n√∫t AI
  setTimeout(() => {
    showAIButton();
  }, 800);
    
    return result;
  };
}